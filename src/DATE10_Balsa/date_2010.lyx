#LyX 1.6.3 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options true
\language british
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle empty
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Optimisation of handshake circuits control path using STG resynthesis
\end_layout

\begin_layout Author
{author information removed for blind review}
\end_layout

\begin_layout Abstract
The paper proposes a modification of the standard design workflow that is
 used in Balsa design automation system.
 The controllers obtained by syntax-directed mapping used in Balsa usually
 suffer from performance, area and power overheads because the predesigned
 set of components is required to implement the declared protocols fully
 and correctly in order to be reusable in all possible circuit configurations,
 which results in redundancy.
 This redundancy can be eliminated by replacing the manually designed gate-level
 implementations of the high level components with the corresponding STG
 specifications.
 The STGs of individual components that form the system are then composed
 together to produce the final system STG that is used to synthesise an
 optimal implementation of the control circuit.
 The process is automated as a plug-in for Workcraft framework.
\end_layout

\begin_layout Abstract
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\begin_inset CommandInset label
LatexCommand label
name "sec:Introduction"

\end_inset


\end_layout

\begin_layout Standard
The main obstacle for the wider spread of asynchronous systems remains to
 be the inherent complexity of their design.
 Several solutions are accepted by the industry that ease the design process
 through abstraction of predesigned asynchronous circuit parts as standardised
 high level components.
 A designer is able to use these components as 
\begin_inset Quotes eld
\end_inset

building blocks
\begin_inset Quotes erd
\end_inset

, and then obtain the final gate-level design through an automated mapping
 process.
 Furthermore, some of the well-known asynchronous design automation packages,
 such as Tangram
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "951597"

\end_inset

, and Balsa
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "balsa"

\end_inset

, define a high-level programming-like language that is used to describe
 systems.
 The language constructs are then directly translated into a network of
 
\emph on
handshake components 
\emph default
-- blocks with predefined functionality that use 
\emph on
handshakes
\emph default
 to interface with other components, which are in turn mapped into a gate
 netlist.
 
\end_layout

\begin_layout Standard
Although this method greatly enhances the designer's productivity, it has
 several important drawbacks, of which the control-path overhead is the
 most decisive.
 The controllers obtained by syntax-directed mapping are usually far from
 optimal, because the predesigned components are required to implement their
 declared protocols fully and correctly in order to be reusable in all possible
 circuit configurations.
 However, it is often the case that a significant part of their functionality
 becomes redundant due to the peculiarities of the specific configuration,
 e.g.
 in many cases full handshaking between the components can be avoided.
\end_layout

\begin_layout Standard
This redundancy can be eliminated by replacing the manually designed gate-level
 implementation of the high level components with an equivalent STG
\begin_inset space ~
\end_inset

(signal transition graph)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Yakovlev_1998_cs"

\end_inset

 specification.
 The individual component STGs are then composed together to form a complete
 system STG
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "785214"

\end_inset

, which is optimised using 
\noun on
petrify
\begin_inset space ~
\end_inset


\noun default

\begin_inset CommandInset citation
LatexCommand cite
key "cortadella_petrify"

\end_inset


\noun on
.

\noun default
 An optimal gate-level implementation can then be automatically produced
 from the STG using tools such as 
\noun on
petrify
\noun default

\begin_inset space ~
\end_inset


\noun on

\begin_inset CommandInset citation
LatexCommand cite
key "cortadella_petrify"

\end_inset

, SIS
\noun default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Sentovich:M92/41"

\end_inset


\noun on
 
\noun default
and
\noun on
 MPSat
\noun default

\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Khomenko_2004_MPSAT"

\end_inset


\noun on
.

\noun default
 Automatic synthesis becomes problematic when the size of the STG becomes
 large: modern synthesis tools can handle STGs of no more than 100 signals.
 The impact of this problem can be lessened by including STG decomposition
 tools
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "DesiJ"

\end_inset

 into the workflow, that would break the large optimised STG down into several
 smaller STGs that are synthesisable in reasonable time.
 Alternatively, the decomposition step can be carried out on the level of
 the handshake circuits, dividing the circuit into smaller blocks of components.
\end_layout

\begin_layout Standard
This paper proposes an automated method to include the aforementioned modificati
on of the standard design workflow that is used in Balsa design automation
 system
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "balsa"

\end_inset

 using 
\noun on
Workcraft
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "DBLP:conf/apn/PoliakovKY09"

\end_inset

 
\noun default
framework.
\end_layout

\begin_layout Section
Balsa workflow optimisation through STG resynthesis
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/balsa-design-workflow.eps
	width 25page%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
Balsa design workflow
\begin_inset CommandInset label
LatexCommand label
name "fig:Balsa-design-workflow"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/balsa-workflow-modification.eps
	width 25page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Modified Balsa workflow
\begin_inset CommandInset label
LatexCommand label
name "fig:Modified-Balsa-workflow"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The standard Balsa design workflow is comprised of several stages
\begin_inset space ~
\end_inset

(Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Balsa-design-workflow"

\end_inset

).
 The designer writes the system specification in Balsa language.
 It is passed to the Balsa compiler, which generates a handshake component
 netlist (produced in a language called Breeze) using syntax-directed mapping
 on the source code.
 Syntax-directed mapping in this context means that there is a predefined
 handshake component construct for every syntactic structure.
 The Breeze netlist is then translated into a gate-level netlist using direct
 mapping, this time from individual handshake components to their gate-level
 implementation, which is defined beforehand.
\end_layout

\begin_layout Standard
The proposed modification of this workflow is shown in
\begin_inset space ~
\end_inset

Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modified-Balsa-workflow"

\end_inset

.
 The translation from Balsa language into Breeze netlist is retained (and
 is still done by the Balsa compiler), but the Breeze-netlist to gate-level-netl
ist mapping is replaced with the STG resynthesis flow as introduced in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Introduction"

\end_inset

.
 Instead of using Balsa tools to produce a gate-level netlist, the Breeze
 netlist is read by a special interpreted graph model plug-in to 
\noun on
Workcraft 
\noun default
tool
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "DBLP:conf/apn/PoliakovKY09"

\end_inset

, which replaces the handshake components with their STG specifications
 and produces a composition of those STGs using 
\noun on
PComp
\noun default
 tool.
 If the resulting STG is small enough, the gate-level implementation may
 immediately be synthesised using any of the available synthesis tools.
\end_layout

\begin_layout Standard
However, for many practical cases the composed STG will become quite large.
 In this case, to synthesise the implementation it is necessary to insert
 an additional decomposition step, which may be either STG decomposition
\begin_inset space ~
\end_inset

(implemented using a tool called 
\noun on
DesiJ
\begin_inset space ~
\end_inset


\noun default

\begin_inset CommandInset citation
LatexCommand cite
key "DesiJ"

\end_inset

 that is automatically called from the plug-in), or
\noun on
 
\noun default
handshake circuit
\begin_inset space ~
\end_inset

(HC) decomposition which is supported by the plug-in directly.
 Therefore, the whole process is automated in the 
\noun on
Workcraft 
\noun default
framework.
\end_layout

\begin_layout Standard
The technique allows to synthesise more efficient control circuits while
 at the same time preserving the benefit of rapid design methodology fundamental
 to Balsa.
 It should be noted, however, that full modelling of all Breeze components
 with STGs is not practical.
 The behaviour of most data components would be too complex to synthesise
 from an STG.
 Circuit resynthesis for such components would take too much time and would
 often be less effective than an already existing gate-level implementation
 done by an experienced designer.
 Subsequently, all data-related functionality in HCs is modelled outside
 of STG composition framework: the STG models include only control signals
 for the data path elements.
 These control signals are to be connected after the gate-level generation
 step to the data-path circuit that is assembled separately (its components
 are specified by a structural Verilog netlist).
 The data path is generated automatically side-by-side with the STG behaviour
 model.
\end_layout

\begin_layout Section
Support of Breeze Handshake Circuits as Interpreted Graph Model in 
\noun on
Workcraft
\end_layout

\begin_layout Standard
For the purpose of implementation of the design flow discussed in this paper
 the 
\noun on
Workcraft
\noun default
 framework was extended with a plug-in that introduces support for Breeze
 HCs.
 The new HC model allows 
\noun on
Workcraft
\noun default
's convenient visual editing tools to be applied for creation and editing
 of Breeze netlists.
 The same plug-in also performs generation of the STG behaviour model for
 the specified HC.
 The STG generation algorithm is designed to be highly customisable, with
 support of multiple handshake protocols and various STG implementations
 for each type of component.
 At the moment of writing, STG generation was implemented for a limited
 set of components using early 4-phase handshake protocol.
 The library of components is being expanded and will include all Breeze
 components with support for different handshake protocols.
\end_layout

\begin_layout Section
STG specifications of individual handshake components
\begin_inset CommandInset label
LatexCommand label
name "sec:Individual-component-examples"

\end_inset


\end_layout

\begin_layout Standard
Balsa components can be roughly divided in three groups: pure control components
, data path control components and data-control interface components.
 We will review each group separately.
\end_layout

\begin_layout Subsection
Pure control path components
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Control/sequence-HC.eps
	scale 50

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename figures/Control/sequenceoptimised.eps
	lyxscale 15
	scale 15

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
SequenceOptimised
\begin_inset CommandInset label
LatexCommand label
name "fig:SequenceOptimised"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Control/concur-HC.eps
	scale 50

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename figures/Control/concur.eps
	lyxscale 20
	scale 15

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Concur
\begin_inset CommandInset label
LatexCommand label
name "fig:Concur"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Pure control path handshake components and their respective STGs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pure control components only control the behaviour of other components and
 do not carry out any data operations.
 These components are expected to gain the most from the new design workflow
 because all of their handshakes are inside the control path and such handshakin
g does not have to always strictly correspond to the general protocol.
\end_layout

\begin_layout Standard
The examples are Concur
\begin_inset space ~
\end_inset

(Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Concur"

\end_inset

) and SequenceOptimised
\begin_inset space ~
\end_inset

(Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SequenceOptimised"

\end_inset

) components.
 The STGs in those figures are highly parallel specifications of these component
s.
 However, experimental results show that although such implementation might
 look better on paper, in practise it is sometimes better to specify traditional
, more sequential behaviour.
 This significantly simplifies the task for synthesis tools, particularly
 those based on state space exploration techniques, because high parallelism
 often leads to early state space explosion problem.
 Besides that, a parallel specification suffers more from CSC
\begin_inset space ~
\end_inset

(complete state coding) problems: a significant number of auxiliary signals
 have to be introduced to achieve CSC.
\end_layout

\begin_layout Subsection
Data path control components
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Data/binaryfunc-HC.eps
	scale 40

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename figures/Data/binaryfunc.eps
	lyxscale 15
	scale 11

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
BinaryFunc
\begin_inset CommandInset label
LatexCommand label
name "fig:BinaryFunc"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Data/callmux-HC.eps
	scale 50

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename figures/Data/callmux.eps
	lyxscale 20
	scale 13

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
CallMux
\begin_inset CommandInset label
LatexCommand label
name "fig:CallMux"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Data/variable-HC.eps
	scale 50

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename figures/Data/variable.eps
	lyxscale 20
	scale 13

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Variable
\begin_inset CommandInset label
LatexCommand label
name "fig:Variable"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Pure control path handshake components and their respective STGs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This group of components is used to control the the corresponding data path
 components that execute predefined operations on data.
 These operations are far too complex for automated synthesis, but the control
 path part can still be optimised using STG resynthesis, which makes it
 reasonable to separate data and control signals.
 The signals that control the data path are in this case specified as the
 input and output signals of the component's STG.
 Because the data path blocks are outside this specification, their handshake
 protocols must be implemented strictly and thus cannot be optimised.
 This, however, does not prevent the optimisation of handshakes that belong
 to the same component but interface with other control path components.
\end_layout

\begin_layout Standard
BinaryFunc
\begin_inset space ~
\end_inset

(Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BinaryFunc"

\end_inset

), CallMux
\begin_inset space ~
\end_inset

(Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CallMux"

\end_inset

), Variable
\begin_inset space ~
\end_inset

(Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Variable"

\end_inset

) are good examples of the data path control components.
\end_layout

\begin_layout Subsection
Data-control interface components
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align left
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/while-HC.eps
	scale 50
	BoundingBox 0bp 0bp 134bp 80bp

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename figures/while.eps
	lyxscale 20
	scale 12

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
While
\begin_inset CommandInset label
LatexCommand label
name "fig:While"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/case-HC.eps
	scale 50

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename figures/case.eps
	lyxscale 20
	scale 13

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Case
\begin_inset CommandInset label
LatexCommand label
name "fig:Case"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Data-control interface components and their respective STGs
\begin_inset CommandInset label
LatexCommand label
name "fig:Data-control-interface-components"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Data-control interface components provide conversion of data to control
 signals or vice versa.
 For example, the While component
\begin_inset space ~
\end_inset

(Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:While"

\end_inset

) analyses the input data to decide whether it should end its operation
 and conclude the activation handshake, or to continue activating the output
 handshake.
 Case component
\begin_inset space ~
\end_inset

(Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Case"

\end_inset

) handles the data in a very similar way, however it has an arbitrary bus
 width, so for bus widths of more than one bit a decoder that resides in
 the data path could be used to reduce the STG complexity.
 These components STGs can become quite complex and the strict behaviour
 of their data-path handshakes must be preserved.
\end_layout

\begin_layout Section
An example: GCD controller
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/breeze-gcd-partition.eps
	width 30page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Breeze Handshake Circuit model of a GCD block
\begin_inset CommandInset label
LatexCommand label
name "fig:GCD"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We have chosen the GCD controller
\begin_inset space ~
\end_inset

(Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GCD"

\end_inset

) to demonstrate how the proposed technique applies to real-life circuits.
 The GCD controller is a good research example because it has components
 from every group described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Individual-component-examples"

\end_inset

 and its complexity does not allow omitting of the STG decomposition step,
 which is an important part of the proposed workflow.
 All available synthesis tools failed to synthesise a circuit from the fully
 composed STG model of GCD controller.
 This proves that the decomposition is a necessary step lacking which the
 synthesis of a practical circuit is not likely to succeed.
\end_layout

\begin_layout Standard
Decomposition on the level of STG can be replaced with decomposition on
 the level of handshake components.
 Such decomposition can be done simply by partitioning the input handshake
 circuit into blocks, trying to minimise the number of handshakes between
 blocks, and applying the synthesis process to each block separately.
 While working with the GCD example it was found that decomposition on the
 level of handshake components can be done easier and is guaranteed to be
 successful, whereas decomposition on the STG level is a complex task, which
 requires additional third-party tools.
\end_layout

\begin_layout Section
Experimental results
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="4">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row endhead="true">
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Component type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
MPSat
\noun default
 cost
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Petrify
\noun default
 cost
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Best
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BinaryFunc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Case
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fetch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Concur
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Variable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sequence
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CallMux
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
33
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
While
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Total
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
305
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
333
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
285
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Costs of individual components
\begin_inset CommandInset label
LatexCommand label
name "tab:Costs-of-individual"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
MPSat
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synthesised block
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cost
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
seq+concur+2xfetch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
35
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fetch+var+2xBF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
49 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fetch+var+2xBF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
49 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fetch+case
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
while
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
callmux
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
callmux
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Total
\noun default
 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
223
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\noun on

\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\noun default

\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Petrify
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synthesised block
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cost
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
var+2xBF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
52
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
var+2xBF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
52
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2xfetch+case
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fetch+while
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
seq+concur+fetch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
callmux 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
33
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fetch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
callmux
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
33
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Total
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
270
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Best choice
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Synthesised block
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cost
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
var+callmux+2xBF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
63
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fetch+while
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fetch+case
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
seq+concur+2xfetch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
35
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
callmux
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fetch+var+2xBF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Total
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
220
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Cost of optimally split full GCD circuit
\begin_inset CommandInset label
LatexCommand label
name "tab:Cost-of-optimally"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
For the evaluation of the proposed method effectiveness, each individual
 handshake component was synthesised separately and its cost
\begin_inset space ~
\end_inset

(in logic equation literals) estimated.
 Then, parts of the GCD handshake circuit were synthesised from the STG
 composition, and the cost of this implementation was compared to the sum
 of costs of individual components implementations.
 For synthesis, two tools were used: MP
\noun on
Sat
\noun default
 and 
\noun on
Petrify
\noun default
.
 
\end_layout

\begin_layout Standard
The process of circuit synthesis using this approach was completely automated.
\end_layout

\begin_layout Standard
In Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Costs-of-individual"

\end_inset

, the costs of each standalone handshake component, synthesised from the
 STG specifications, are shown.
 The results are shown for both applied synthesis tools.
\end_layout

\begin_layout Standard
In Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Cost-of-optimally"

\end_inset

, the cost of fully sythesised GCD controller is shown.
 The cost was derived for synthesis carried out by each tool individually,
 and for the best mix of HC parts produced by both tools, selected on lowest
 total cost basis (in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GCD"

\end_inset

, two such parts are highlighted).
\end_layout

\begin_layout Standard
It can easily be seen from the tables that the cost improvement for the
 GCD circuit was approximately 28%.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
The methodology presented in this paper aims to improve the existing design
 workflow of Balsa asynchronous synthesis system.
 A workflow modification was presented that introduces automated synthesis
 based on STG composition into the traditional Balsa workflow that allows
 to lessen the control path overheads.
 The technique was implemented as a plug-in to the 
\noun on
Workcraft 
\noun default
framework and the whole process is automatic.
 A GCD controller was used as a test example that produced promising preliminary
 results.
\end_layout

\begin_layout Standard
Acknowledgement: {information removed for blind review}
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
